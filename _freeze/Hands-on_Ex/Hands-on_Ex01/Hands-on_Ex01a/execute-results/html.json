{
  "hash": "f6fefc4c1b50d5fddd5daf56b691f645",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on 1A | Geospatial Data Wrangling with R\"\nsubtitle: \"In this exercise, we will learn to use R for geospatial data handling, including importing, transforming, wrangling, and visualizing data with sf, tidyverse, and ggplot2.\"\ndate: \"Aug 29, 2025\"\ndate-modified: \"last-modified\"\nauthor: Linh Nguyen\nexecute:\n  echo: true\n  eval: true\n  freeze: auto\n  message: false\n  warning: false\nformat:\n  html:\n    code-link: true\n    toc: true\nnumber-sections: true\nnumber-offset: 1\neditor: visual\n---\n\n## Learning Outcome\n\n-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,\n-   importing geospatial data by using appropriate functions of **sf** package,\n-   importing aspatial data by using appropriate function of **readr** package,\n-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,\n-   assigning or transforming coordinate systems by using using appropriate *sf* functions,\n-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,\n-   performing geoprocessing tasks by using appropriate functions of **sf** package,\n-   performing data wrangling tasks by using appropriate functions of **dplyr** package and\n-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.\n\n## The Data\n\n| Dataset                                     | Source                                                                            | Description                                              |\n|---------------------------------------------|-----------------------------------------------------------------------------------|----------------------------------------------------------|\n| **Master Plan 2014 Subzone Boundary (Web)** | [data.gov.sg](https://data.gov.sg/)                                               | Geospatial boundaries for Singapore's planning subzones. |\n| **Pre-Schools Location**                    | [data.gov.sg](https://data.gov.sg/)                                               | Location data for pre-schools in Singapore.              |\n| **Cycling Path**                            | [LTA DataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html) | Geospatial data for cycling paths in Singapore.          |\n| **Singapore Airbnb Listings**               | [Inside Airbnb](http://insideairbnb.com/get-the-data.html)                        | Latest listing data for Airbnb properties in Singapore.  |\n\n## Installing and Loading the R Packages\n\nTwo main R packages will be used in this exercise:\n\n| Package       | Purpose                                              | Use Case in Exercise                          |\n|---------------|------------------------------------------------------|-----------------------------------------------|\n| **sf**        | Importing, managing, and processing geospatial data. | Handling and processing geospatial data in R. |\n| **tidyverse** | Comprehensive set of tools for data science tasks.   | Importing, wrangling, and visualizing data.   |\n\n### Tidyverse Sub-packages\n\nThe `tidyverse` package includes the following sub-packages used in this exercise:\n\n| Sub-package | Purpose                          |\n|-------------|----------------------------------|\n| **readr**   | Importing CSV data.              |\n| **readxl**  | Importing Excel worksheets.      |\n| **tidyr**   | Manipulating and tidying data.   |\n| **dplyr**   | Transforming and wrangling data. |\n| **ggplot2** | Visualizing data.                |\n\nTo install and load these packages, use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n## Import Geospatial Data\n\nThe code block below uses st_read() function of sf package to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.\n\n-   `dsn` refers to data source name\n-   `layer` points to the file name.\n-   more details: [st_read function - RDocumentation](https://www.rdocumentation.org/packages/sf/versions/0.2-2/topics/st_read)\n\n### Import polygon feature data in shapefile format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/geospatial\",\n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\ngoclinhnguyen-2806\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n:::\n\n### Import polyline feature data in shapefile format\n\nThe code block below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/geospatial\",\n                         layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `D:\\ngoclinhnguyen-2806\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** There are a total of 3138 features and 2 fields in `cyclingpath` linestring feature data frame and it is in **svy21** projected coordinates system too.\n:::\n\n### Import GIS data in kml format\n\nAs compared to `st_read` for shapefiles, we need to pass the file extension when importing kml files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\ngoclinhnguyen-2806\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84** coordinates system.\n:::\n\n## Checking the Content of A Simple Feature Data Frame\n\nThere are different ways to retrieve information related to the content of a simple feature data frame.\n\n### Working with *st_geometry()*\n\nThe column in the sf data.frame that contains the geometries is a list, of class `sfc`.\n\nThe code block below shows the general way to use `st_geometry()`. Alternative is mpsz\\$geom or mpsz\\[\\[1\\]\\] to retrieve the geometry list-column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The print only displays *basic information* of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n:::\n\n### Working with *glimpse()*\n\nTo learn more about the associated attribute information in the data frame, we can use `glimpse` from `dplyr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** *glimpse()* report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n:::\n\n### Working with *head()*\n\nTo reveal complete information of a feature object, we can use `head()` from R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** It shows the top 5 rows from `mpsz`.\n:::\n\n## Plotting the Geospatial Data\n\nThis section covers visualization of geospatial features using `plot()` of R graphic.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The default plot of an sf object is a *multi-plot of all attributes*, up to a reasonable maximum as shown above.\n:::\n\nAlternatively, we can also choose the plot the sf object by *using a specific attribute* as shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nFor high cartographic quality plot, other R package such as tmap should be used.\n:::\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Working with Map Projection\n\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, **we need to ensure that both geospatial data are projected using similar coordinate system.**\n\n**Projection transformation** is a method to project a simple feature data frame from one coordinate system to another coordinate system.\n\n### Assigning EPSG code to a simple feature data frame\n\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\n\nThis is an example the coordinate system of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\nAlthough `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).\n\nIn order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_set_crs(mpsz, 3414)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n**Output Explanation:** Note that the EPSG code is 3414 now.\n\n### Transforming the projection of preschool from wgs84 to svy21.\n\nIt is very common in geospatial analytics to transform the original data from geographic coordinate system (gcs) to projected coordinate system (pcs). **This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.**\n\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\n\n::: {.cell}\n\n:::\n\n\n**This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used.** This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.\n\nLet us perform the projection transformation by using the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_transform(preschool,\n                              crs = 3414)\n```\n:::\n\n\n::: callout-note\nIn practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n:::\n\nNext, let us display the content of preschool3414 sf data frame as shown below.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** Note that it is in svy21 projected coordinate system now. Furthermore, for the *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n:::\n\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Importing and Converting An Aspatial Data\n\nIn this section, we will learn how to process aspatial data such as `listing` of Inside Airbnb. It is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\n\nWe will first import the aspatial data and save it as a tibble dataframe and convert it into a simple feature dataframe.\n\n### Import the aspatial data\n\nSince `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code block below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n```\n:::\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\n\nThe code block below shows *list()* of Base R instead of *glimpse()* is used to do the job.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 3,659 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 7 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 8 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n10 369141 5mins fr… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,649 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The. `listing` tibble data frame consists of 4252 rows and 16 columns. We will use the `latitude` and `longtitude` fields. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.\n:::\n\nThe code block below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings,\n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nThings to learn from the arguments above:\n\n-   *coords*: argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n-   *crs*: argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).\n-   *%\\>%*: is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,659\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 29…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 143, NA, 76, NA, NA, 85, NA, NA, 41, 79…\n$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 180, 180, 92,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1…\n$ calculated_host_listings_count <dbl> 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,…\n$ availability_365               <dbl> 90, 79, 90, 153, 153, 365, 153, 153, 36…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n\n\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:**: The table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n:::\n\n### Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using **st_as_sf()** of sf packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nThings to learn from the arguments above:\n\n- coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\n- crs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n- %>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\nLet us examine the content of this newly created simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 3,659\nColumns: 17\n$ id                             <dbl> 71609, 71896, 71903, 275343, 275344, 29…\n$ name                           <chr> \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        <dbl> 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      <chr> \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            <chr> \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  <chr> \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 143, NA, 76, NA, NA, 85, NA, NA, 41, 79…\n$ minimum_nights                 <dbl> 92, 92, 92, 180, 180, 92, 180, 180, 92,…\n$ number_of_reviews              <dbl> 19, 24, 46, 20, 16, 131, 17, 5, 60, 81,…\n$ last_review                    <date> 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              <dbl> 0.12, 0.14, 0.27, 0.13, 0.10, 0.80, 0.1…\n$ calculated_host_listings_count <dbl> 5, 5, 5, 58, 58, 7, 58, 58, 5, 7, 7, 1,…\n$ availability_365               <dbl> 90, 79, 90, 153, 153, 365, 153, 153, 36…\n$ number_of_reviews_ltm          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ license                        <chr> NA, NA, NA, \"S0399\", \"S0399\", NA, \"S039…\n$ geometry                       <POINT [m]> POINT (41972.5 36390.05), POINT (…\n```\n\n\n:::\n:::\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.\n\n::: Try plotting listing_sf layer on top of mpsz layer\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(listings_sf), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n## Geoprocessing with *sf*\n\nIn addition to offering tools for managing geospatial data (such as importing, exporting, assigning, and transforming projections), the sf package also includes a wide range of geoprocessing functions for GIS analysis.\n\n### Use case 1: Land acquisition analysis\n\n#### Scenario:\n\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\n\n#### Solution:\n\n**Method 1**\n\nStep 1: The [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) function of the **sf** package is used to compute the 5-meter buffers around the cycling paths.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath <- st_transform(cyclingpath, crs = 3414)\nbuffer_cycling <- st_buffer(cyclingpath,\n                               dist=5, nQuadSegs = 30)\n```\n:::\n\n\nStep 2: Calculate the area of the buffers as shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n```\n:::\n\n\nStep 3: sum() of Base R will be used to derive the total land involved\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n3561648 [m^2]\n```\n\n\n:::\n:::\n\n**Method 2** \n\nWe can also create a plot showing the buffer by a selected planning subzone.\n\nAssuming that we are interested on the land acquisition in Tampines West planning subzone.\n\nStep 1: **filter()** of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_selected <- mpsz %>%\n  filter(SUBZONE_N == \"TAMPINES WEST\") \n```\n:::\n\n\nStep 2: **st_intersection()** of sf package will be used to clip cycling buffers within Tampines West planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling_selected <- st_intersection(\n  st_geometry(buffer_cycling), \n  st_geometry(mpsz_selected)\n)\n```\n:::\n\n\nStep 3: **plot()** of R Graphic will be used to create the plot as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz_selected),main = \"Cycling Buffer in Tampines West\")\nplot(st_geometry(buffer_cycling_selected), \n     border =\"#8EB859\",\n     add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### Use case 2: To determine the number of pre-schools by planning subzone\n\n#### Scenario:\n\nThe authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.\n\n#### Solution:\n\nThe code block below performs two operations at one go.\n\n1.  identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html).\n2.  [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))\n```\n:::\n\n\n> **Warning**: You should not confuse with [st_intersection()](https://r-spatial.github.io/sf/reference/geos_binary_ops.html).\n\nThe summary statistics of the newly derived *PreSch Count* field by using *summary()* is shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz$`PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n\n\n:::\n:::\n\n\nNext *top_n()* from dplyr package is used with n=1 to list the planning subzone with the highest number of pre-school.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_n(mpsz, 1, `PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n\n\n:::\n:::\n\n\n**Exercise: Calculate the density of pre-school by planning subzone.**\n\nTo determine the **density of pre-schools by planning subzone**, the *st_area()* function from the **sf** package is used to calculate the area of each planning subzone, and the result is stored in a new `Area` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz$Area <- mpsz %>%\n  st_area()\n```\n:::\n\n\nNext, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/index.html) package is used to compute the density by using the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- mpsz %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n:::\n\n\n## Exploratory Data Analysis (EDA)\n\nIn this section, we will learn how to use `ggplot2` to create functional and yet truthful statistical graphs for EDA purposes.\n\n1.  We will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code block below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\n\nIn the code block below, appropriate **ggplot2** functions will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning subzones with a single pre-school, on the other hand, \\nthere are seven planning subzones with at least 30 or more pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nIn the code chunk below, appropriate ggplot2 functions are used to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01a_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Output Explanation:** The scatterplot shows a positive relationship between pre-school density (per km²) and pre-school count, showing that areas with higher density tend to have a greater number of pre-schools.\n:::",
    "supporting": [
      "Hands-on_Ex01a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}